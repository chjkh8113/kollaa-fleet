#!/bin/bash
# Kollaa Fleet - Deployment Module
# This script handles the actual deployment of OpenStack

set -euo pipefail

# Source the main installer functions
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Ensure directories exist before sourcing
mkdir -p "$SCRIPT_DIR/deployment-config"

source "$SCRIPT_DIR/install.sh" 2>/dev/null || true

# Additional deployment functions

# Step 7: Dependencies Installation
step_install_dependencies() {
    update_step 6 "IN_PROGRESS"
    show_progress
    
    echo -e "${WHITE}${BOLD}=== Installing Dependencies ===${NC}"
    log "Installing dependencies"
    
    # Detect OS
    if [[ -f /etc/redhat-release ]]; then
        OS_FAMILY="redhat"
    elif [[ -f /etc/debian_version ]]; then
        OS_FAMILY="debian"
    else
        error_exit "Unsupported operating system"
    fi
    
    # Install system packages
    info_message "Installing system packages..."
    
    if [[ "$OS_FAMILY" == "redhat" ]]; then
        sudo dnf update -y
        sudo dnf install -y epel-release
        sudo dnf install -y python3 python3-pip python3-dev git curl wget \
                            ansible-core sshpass jq bc
    else
        sudo apt update
        sudo apt install -y python3 python3-pip python3-dev git curl wget \
                           ansible-core sshpass jq bc
    fi
    
    # Install Python packages in user space
    info_message "Installing Python packages..."
    
    # Create virtual environment for user
    python3 -m venv "$HOME/.kolla-venv"
    source "$HOME/.kolla-venv/bin/activate"
    
    # Upgrade pip
    pip install --upgrade pip
    
    # Install Kolla-Ansible and dependencies
    pip install "kolla-ansible>=$OPENSTACK_RELEASE"
    pip install ansible netaddr jinja2 pbr docker PyYAML
    
    # Create kolla config directory with proper permissions
    sudo mkdir -p /etc/kolla
    sudo chown "$USER:$USER" /etc/kolla
    
    # Copy Kolla configuration files
    cp -r "$HOME/.kolla-venv/share/kolla-ansible/etc_examples/kolla"/* /etc/kolla/
    cp "$HOME/.kolla-venv/share/kolla-ansible/ansible/inventory"/* "$SCRIPT_DIR/"
    
    success_message "Dependencies installed successfully"
    update_step 6 "COMPLETED"
}

# Step 8: SSH Key Configuration
step_configure_ssh() {
    update_step 7 "IN_PROGRESS"
    show_progress
    
    echo -e "${WHITE}${BOLD}=== Configuring SSH Access ===${NC}"
    log "Configuring SSH access"
    
    # Generate SSH key if not exists
    if [[ ! -f "$HOME/.ssh/id_rsa" ]]; then
        info_message "Generating SSH key pair..."
        ssh-keygen -t rsa -b 4096 -f "$HOME/.ssh/id_rsa" -N ""
        SSH_KEY_PATH="$HOME/.ssh/id_rsa"
    fi
    
    # Configure SSH client
    cat > "$HOME/.ssh/config" <<EOF
Host *
    StrictHostKeyChecking no
    UserKnownHostsFile /dev/null
    LogLevel ERROR
EOF
    
    chmod 600 "$HOME/.ssh/config"
    
    # Copy SSH keys to all nodes
    info_message "Copying SSH keys to all nodes..."
    
    local all_ips=("${CONTROLLER_IPS[@]}" "${COMPUTE_IPS[@]}")
    if [[ "$DEPLOY_CEPH" == true ]]; then
        all_ips+=("${STORAGE_IPS[@]}")
    fi
    
    for ip in "${all_ips[@]}"; do
        if [[ "$AUTH_METHOD" == "1" ]]; then
            # Use existing SSH key
            ssh-copy-id -i "$SSH_KEY_PATH.pub" "$SSH_USER@$ip" || \
                error_exit "Failed to copy SSH key to $ip"
        else
            # Use password
            sshpass -p "$SSH_PASSWORD" ssh-copy-id -i "$HOME/.ssh/id_rsa.pub" \
                "$SSH_USER@$ip" || error_exit "Failed to copy SSH key to $ip"
        fi
        success_message "SSH key copied to $ip"
    done
    
    success_message "SSH configuration completed"
    update_step 7 "COMPLETED"
}

# Step 9: Inventory Generation
step_generate_inventory() {
    update_step 8 "IN_PROGRESS"
    show_progress
    
    echo -e "${WHITE}${BOLD}=== Generating Ansible Inventory ===${NC}"
    log "Generating inventory file"
    
    # Create inventory file
    cat > "$INVENTORY_FILE" <<EOF
# Kolla-Ansible Inventory - Generated by Kollaa Fleet
# Deployment: $DEPLOYMENT_NAME
# Generated: $(date)

[control]
EOF
    
    # Add controller nodes
    for i in "${!CONTROLLER_IPS[@]}"; do
        echo "control$((i+1)) ansible_host=${CONTROLLER_IPS[$i]} ansible_user=$SSH_USER" >> "$INVENTORY_FILE"
    done
    
    # Add compute nodes
    echo "" >> "$INVENTORY_FILE"
    echo "[compute]" >> "$INVENTORY_FILE"
    for i in "${!COMPUTE_IPS[@]}"; do
        echo "compute$((i+1)) ansible_host=${COMPUTE_IPS[$i]} ansible_user=$SSH_USER" >> "$INVENTORY_FILE"
    done
    
    # Add storage nodes if Ceph is enabled
    if [[ "$DEPLOY_CEPH" == true ]]; then
        echo "" >> "$INVENTORY_FILE"
        echo "[ceph:children]" >> "$INVENTORY_FILE"
        echo "ceph-mon" >> "$INVENTORY_FILE"
        echo "ceph-osd" >> "$INVENTORY_FILE"
        echo "ceph-mgr" >> "$INVENTORY_FILE"
        echo "" >> "$INVENTORY_FILE"
        echo "[ceph-mon]" >> "$INVENTORY_FILE"
        # Use first 3 controllers as Ceph monitors
        for i in $(seq 0 2); do
            if [[ $i -lt ${#CONTROLLER_IPS[@]} ]]; then
                echo "control$((i+1))" >> "$INVENTORY_FILE"
            fi
        done
        echo "" >> "$INVENTORY_FILE"
        echo "[ceph-mgr]" >> "$INVENTORY_FILE"
        echo "control1" >> "$INVENTORY_FILE"
        echo "" >> "$INVENTORY_FILE"
        echo "[ceph-osd]" >> "$INVENTORY_FILE"
        for i in "${!STORAGE_IPS[@]}"; do
            echo "storage$((i+1)) ansible_host=${STORAGE_IPS[$i]} ansible_user=$SSH_USER" >> "$INVENTORY_FILE"
        done
    fi
    
    # Add standard Kolla groups
    cat >> "$INVENTORY_FILE" <<EOF

[network:children]
control

[monitoring:children]
control

[storage:children]
control

[deployment]
localhost ansible_connection=local

# Kolla-Ansible service groups
[baremetal:children]
control
network
compute
monitoring
storage

[mariadb:children]
control

[rabbitmq:children]
control

[keystone:children]
control

[glance:children]
control

[nova:children]
control

[neutron:children]
control
network

[openvswitch:children]
network
compute

[horizon:children]
control

[chrony:children]
control
network
compute
monitoring
storage

[haproxy:children]
control
EOF
    
    # Add optional services
    if [[ "$ENABLE_CINDER" =~ ^[Yy] ]]; then
        echo "" >> "$INVENTORY_FILE"
        echo "[cinder:children]" >> "$INVENTORY_FILE"
        echo "control" >> "$INVENTORY_FILE"
        if [[ "$DEPLOY_CEPH" != true ]]; then
            echo "" >> "$INVENTORY_FILE"
            echo "[cinder-volume:children]" >> "$INVENTORY_FILE"
            echo "storage" >> "$INVENTORY_FILE"
        fi
    fi
    
    if [[ "$ENABLE_HEAT" =~ ^[Yy] ]]; then
        echo "" >> "$INVENTORY_FILE"
        echo "[heat:children]" >> "$INVENTORY_FILE"
        echo "control" >> "$INVENTORY_FILE"
    fi
    
    if [[ "$ENABLE_SWIFT" =~ ^[Yy] ]]; then
        echo "" >> "$INVENTORY_FILE"
        echo "[swift:children]" >> "$INVENTORY_FILE"
        echo "storage" >> "$INVENTORY_FILE"
    fi
    
    success_message "Inventory file generated: $INVENTORY_FILE"
    update_step 8 "COMPLETED"
}

# Step 10: Globals Configuration
step_generate_globals() {
    update_step 9 "IN_PROGRESS"
    show_progress
    
    echo -e "${WHITE}${BOLD}=== Generating Globals Configuration ===${NC}"
    log "Generating globals.yml"
    
    cat > "$GLOBALS_FILE" <<EOF
---
# Kolla-Ansible Global Configuration
# Generated by Kollaa Fleet for deployment: $DEPLOYMENT_NAME
# Generated: $(date)

########################
# Kolla options
########################
kolla_base_distro: "$KOLLA_BASE_DISTRO"
kolla_install_type: "source"
openstack_release: "$OPENSTACK_RELEASE"

########################
# Networking
########################
network_interface: "$MANAGEMENT_INTERFACE"
api_interface: "$API_INTERFACE"
tunnel_interface: "$TUNNEL_INTERFACE"
neutron_external_interface: "$NEUTRON_EXTERNAL_INTERFACE"

kolla_internal_vip_address: "$INTERNAL_VIP"
kolla_external_vip_address: "$EXTERNAL_VIP"

########################
# Enable services
########################
enable_haproxy: "yes"
enable_keystone: "yes"
enable_glance: "yes"
enable_nova: "yes"
enable_neutron: "yes"
enable_horizon: "yes"
EOF
    
    # Add optional services
    if [[ "$ENABLE_CINDER" =~ ^[Yy] ]]; then
        echo "enable_cinder: \"yes\"" >> "$GLOBALS_FILE"
        if [[ "$DEPLOY_CEPH" == true ]]; then
            echo "enable_cinder_backend_ceph: \"yes\"" >> "$GLOBALS_FILE"
        else
            echo "enable_cinder_backend_lvm: \"yes\"" >> "$GLOBALS_FILE"
            echo "cinder_volume_group: \"$CINDER_VOLUME_GROUP\"" >> "$GLOBALS_FILE"
        fi
    fi
    
    if [[ "$ENABLE_HEAT" =~ ^[Yy] ]]; then
        echo "enable_heat: \"yes\"" >> "$GLOBALS_FILE"
    fi
    
    if [[ "$ENABLE_SWIFT" =~ ^[Yy] ]]; then
        echo "enable_swift: \"yes\"" >> "$GLOBALS_FILE"
    fi
    
    if [[ "$ENABLE_OCTAVIA" =~ ^[Yy] ]]; then
        echo "enable_octavia: \"yes\"" >> "$GLOBALS_FILE"
    fi
    
    if [[ "$ENABLE_BARBICAN" =~ ^[Yy] ]]; then
        echo "enable_barbican: \"yes\"" >> "$GLOBALS_FILE"
    fi
    
    if [[ "$ENABLE_IRONIC" =~ ^[Yy] ]]; then
        echo "enable_ironic: \"yes\"" >> "$GLOBALS_FILE"
    fi
    
    if [[ "$ENABLE_MONITORING" =~ ^[Yy] ]]; then
        cat >> "$GLOBALS_FILE" <<EOF
enable_prometheus: "yes"
enable_grafana: "yes"
EOF
    fi
    
    if [[ "$ENABLE_LOGGING" =~ ^[Yy] ]]; then
        cat >> "$GLOBALS_FILE" <<EOF
enable_opensearch: "yes"
enable_opensearch_dashboards: "yes"
EOF
    fi
    
    # Add Ceph configuration if enabled
    if [[ "$DEPLOY_CEPH" == true ]]; then
        cat >> "$GLOBALS_FILE" <<EOF

########################
# Ceph options
########################
enable_ceph: "yes"
glance_backend_ceph: "yes"
nova_backend_ceph: "yes"
ceph_pool_size: "$CEPH_POOL_SIZE"
ceph_pool_min_size: "$CEPH_POOL_MIN_SIZE"
EOF
    fi
    
    # Add provider network configuration
    if [[ "$CONFIGURE_PROVIDER_NETWORKS" == true ]]; then
        cat >> "$GLOBALS_FILE" <<EOF

########################
# Provider Networks
########################
enable_neutron_provider_networks: "yes"
neutron_type_drivers: "flat,vlan,vxlan"
neutron_tenant_network_types: "vxlan"
EOF
    fi
    
    success_message "Globals configuration generated: $GLOBALS_FILE"
    update_step 9 "COMPLETED"
}

# Step 11: Custom Configuration Setup
step_custom_configuration() {
    update_step 10 "IN_PROGRESS"
    show_progress
    
    echo -e "${WHITE}${BOLD}=== Setting Up Custom Configuration ===${NC}"
    log "Setting up custom configuration files"
    
    # Create custom config directories
    mkdir -p /etc/kolla/config/{glance,nova,cinder,neutron}
    
    if [[ "$DEPLOY_CEPH" == true ]]; then
        info_message "Setting up Ceph integration files..."
        
        # Create Ceph configuration directory
        mkdir -p /etc/kolla/config/ceph
        
        # Note: Actual Ceph keyring files will be generated during deployment
        cat > /etc/kolla/config/ceph/ceph.conf <<EOF
[global]
fsid = $(uuidgen)
mon initial members = $(echo "${CONTROLLER_IPS[@]:0:3}" | tr ' ' ',')
mon host = $(echo "${CONTROLLER_IPS[@]:0:3}" | tr ' ' ',')
public network = $CEPH_PUBLIC_NETWORK
cluster network = $CEPH_CLUSTER_NETWORK
auth cluster required = cephx
auth service required = cephx
auth client required = cephx

[mon]
mon allow pool delete = true

[osd]
osd journal size = 1024
osd pool default size = $CEPH_POOL_SIZE
osd pool default min size = $CEPH_POOL_MIN_SIZE
osd pool default pg num = 32
osd pool default pgp num = 32
osd crush chooseleaf type = 1
EOF
        
        # Create placeholder for Ceph keyrings (will be populated later)
        touch /etc/kolla/config/glance/ceph.client.glance.keyring
        touch /etc/kolla/config/cinder/ceph.client.cinder.keyring
        touch /etc/kolla/config/nova/ceph.client.nova.keyring
        
        success_message "Ceph configuration templates created"
    fi
    
    # Create ML2 configuration for Neutron if provider networks are enabled
    if [[ "$CONFIGURE_PROVIDER_NETWORKS" == true ]]; then
        cat > /etc/kolla/config/neutron/ml2_conf.ini <<EOF
[ml2_type_vlan]
network_vlan_ranges = physnet1:$VLAN_RANGE

[ovs]
bridge_mappings = physnet1:br-ex
EOF
        success_message "Neutron ML2 configuration created"
    fi
    
    # Set proper permissions
    sudo chown -R "$USER:$USER" /etc/kolla
    chmod -R 644 /etc/kolla/config/
    find /etc/kolla/config/ -type d -exec chmod 755 {} \;
    
    success_message "Custom configuration setup completed"
    update_step 10 "COMPLETED"
}

# Step 12: Pre-deployment Validation
step_predeployment_validation() {
    update_step 11 "IN_PROGRESS"
    show_progress
    
    echo -e "${WHITE}${BOLD}=== Pre-deployment Validation ===${NC}"
    log "Running pre-deployment validation"
    
    source "$HOME/.kolla-venv/bin/activate"
    
    # Test Ansible connectivity
    info_message "Testing Ansible connectivity..."
    if ansible all -i "$INVENTORY_FILE" -m ping; then
        success_message "All nodes are accessible via Ansible"
    else
        error_exit "Some nodes are not accessible via Ansible"
    fi
    
    # Gather facts about nodes
    info_message "Gathering facts about nodes..."
    ansible all -i "$INVENTORY_FILE" -m setup --tree /tmp/facts/
    
    # Validate node resources
    info_message "Validating node resources..."
    
    # Check disk space
    ansible all -i "$INVENTORY_FILE" -m shell -a "df -h /" | grep -E "(FAILED|UNREACHABLE)" && \
        error_exit "Some nodes failed disk space check"
    
    # Check memory
    ansible all -i "$INVENTORY_FILE" -m shell -a "free -m" | grep -E "(FAILED|UNREACHABLE)" && \
        error_exit "Some nodes failed memory check"
    
    # Check network interfaces
    ansible all -i "$INVENTORY_FILE" -m shell -a "ip link show" | grep -E "(FAILED|UNREACHABLE)" && \
        error_exit "Some nodes failed network interface check"
    
    if [[ "$DEPLOY_CEPH" == true ]]; then
        info_message "Validating Ceph storage devices..."
        if [[ "$OSD_TYPE" == "1" ]]; then
            # Check if OSD devices exist
            ansible ceph-osd -i "$INVENTORY_FILE" -m shell -a "test -b $OSD_DEVICE" || \
                warning_message "Some OSD devices may not exist - continuing anyway"
        fi
    fi
    
    # Validate Kolla configuration
    info_message "Validating Kolla configuration..."
    kolla-ansible -i "$INVENTORY_FILE" validate-config || \
        error_exit "Kolla configuration validation failed"
    
    success_message "Pre-deployment validation completed"
    update_step 11 "COMPLETED"
}

# Step 13: Kolla-Ansible Bootstrap
step_kolla_bootstrap() {
    update_step 12 "IN_PROGRESS"
    show_progress
    
    echo -e "${WHITE}${BOLD}=== Kolla-Ansible Bootstrap ===${NC}"
    log "Running Kolla-Ansible bootstrap"
    
    source "$HOME/.kolla-venv/bin/activate"
    
    # Generate passwords
    info_message "Generating service passwords..."
    kolla-genpwd -p "$PASSWORDS_FILE"
    
    # Bootstrap servers
    info_message "Bootstrapping servers (installing Docker, etc.)..."
    if kolla-ansible -i "$INVENTORY_FILE" bootstrap-servers; then
        success_message "Bootstrap completed successfully"
    else
        error_exit "Bootstrap failed"
    fi
    
    # Run pre-checks
    info_message "Running Kolla pre-deployment checks..."
    if kolla-ansible -i "$INVENTORY_FILE" prechecks; then
        success_message "Pre-checks passed"
    else
        error_exit "Pre-checks failed"
    fi
    
    success_message "Kolla-Ansible bootstrap completed"
    update_step 12 "COMPLETED"
}

# Step 14: OpenStack Deployment
step_openstack_deployment() {
    update_step 13 "IN_PROGRESS"
    show_progress
    
    echo -e "${WHITE}${BOLD}=== OpenStack Deployment ===${NC}"
    log "Deploying OpenStack services"
    
    source "$HOME/.kolla-venv/bin/activate"
    
    # Deploy OpenStack
    info_message "Deploying OpenStack services (this may take 30-60 minutes)..."
    if kolla-ansible -i "$INVENTORY_FILE" deploy; then
        success_message "OpenStack deployment completed successfully"
    else
        error_exit "OpenStack deployment failed"
    fi
    
    success_message "OpenStack deployment completed"
    update_step 13 "COMPLETED"
}

# Step 15: Post-deployment Setup
step_post_deployment() {
    update_step 14 "IN_PROGRESS"
    show_progress
    
    echo -e "${WHITE}${BOLD}=== Post-deployment Setup ===${NC}"
    log "Running post-deployment setup"
    
    source "$HOME/.kolla-venv/bin/activate"
    
    # Run post-deploy
    info_message "Generating admin credentials and running post-deploy tasks..."
    if kolla-ansible -i "$INVENTORY_FILE" post-deploy; then
        success_message "Post-deployment tasks completed"
    else
        error_exit "Post-deployment tasks failed"
    fi
    
    # Install OpenStack client
    info_message "Installing OpenStack client..."
    pip install python-openstackclient
    
    # Source admin credentials
    if [[ -f /etc/kolla/admin-openrc.sh ]]; then
        source /etc/kolla/admin-openrc.sh
        
        # Test OpenStack connectivity
        info_message "Testing OpenStack connectivity..."
        if openstack service list; then
            success_message "OpenStack is accessible and working"
        else
            warning_message "OpenStack client test failed"
        fi
    fi
    
    # Display access information
    echo -e "${GREEN}${BOLD}"
    echo "╔══════════════════════════════════════════════════════════════════════════════╗"
    echo "║                      DEPLOYMENT COMPLETED SUCCESSFULLY!                     ║"
    echo "╚══════════════════════════════════════════════════════════════════════════════╝"
    echo -e "${NC}"
    echo ""
    echo -e "${CYAN}${BOLD}Access Information:${NC}"
    echo -e "${CYAN}Horizon Dashboard: https://$EXTERNAL_VIP${NC}"
    echo -e "${CYAN}Admin credentials: /etc/kolla/admin-openrc.sh${NC}"
    echo -e "${CYAN}Passwords file: $PASSWORDS_FILE${NC}"
    echo ""
    echo -e "${YELLOW}${BOLD}Next Steps:${NC}"
    echo -e "${YELLOW}1. Source admin credentials: source /etc/kolla/admin-openrc.sh${NC}"
    echo -e "${YELLOW}2. Create initial networks and flavors${NC}"
    echo -e "${YELLOW}3. Upload VM images to Glance${NC}"
    echo -e "${YELLOW}4. Configure security groups${NC}"
    echo ""
    
    success_message "Post-deployment setup completed"
    update_step 14 "COMPLETED"
}

# Deployment main function
deploy_main() {
    print_banner
    
    # Load deployment state
    if [[ ! -f "$CONFIG_DIR/deployment.state" ]]; then
        error_exit "No deployment configuration found. Run './install.sh' first."
    fi
    
    source "$CONFIG_DIR/deployment.state"
    
    echo -e "${CYAN}Starting deployment for: $DEPLOYMENT_NAME${NC}"
    echo ""
    
    # Execute deployment steps
    step_install_dependencies
    step_configure_ssh
    step_generate_inventory
    step_generate_globals
    step_custom_configuration
    step_predeployment_validation
    step_kolla_bootstrap
    step_openstack_deployment
    step_post_deployment
    
    # Final success message
    echo -e "${GREEN}${BOLD}Deployment completed successfully!${NC}"
    log "Deployment completed successfully"
}

# Run deployment if called directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    deploy_main "$@"
fi